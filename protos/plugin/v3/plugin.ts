/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.19.1
 * source: protos/plugin/v3/plugin.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../../../google/protobuf/timestamp";
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace cloudquery.plugin.v3 {
    export class GetName extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): GetName {
            const message = new GetName({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetName {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetName();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetName {
            return GetName.deserialize(bytes);
        }
    }
    export namespace GetName {
        export class Request extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {}) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") { }
            }
            static fromObject(data: {}): Request {
                const message = new Request({});
                return message;
            }
            toObject() {
                const data: {} = {};
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Request {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Request();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): Request {
                return Request.deserialize(bytes);
            }
        }
        export class Response extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                name?: string;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("name" in data && data.name != undefined) {
                        this.name = data.name;
                    }
                }
            }
            get name() {
                return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
            }
            set name(value: string) {
                pb_1.Message.setField(this, 1, value);
            }
            static fromObject(data: {
                name?: string;
            }): Response {
                const message = new Response({});
                if (data.name != null) {
                    message.name = data.name;
                }
                return message;
            }
            toObject() {
                const data: {
                    name?: string;
                } = {};
                if (this.name != null) {
                    data.name = this.name;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.name.length)
                    writer.writeString(1, this.name);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Response {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Response();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.name = reader.readString();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): Response {
                return Response.deserialize(bytes);
            }
        }
    }
    export class GetVersion extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): GetVersion {
            const message = new GetVersion({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetVersion {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetVersion();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetVersion {
            return GetVersion.deserialize(bytes);
        }
    }
    export namespace GetVersion {
        export class Request extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {}) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") { }
            }
            static fromObject(data: {}): Request {
                const message = new Request({});
                return message;
            }
            toObject() {
                const data: {} = {};
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Request {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Request();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): Request {
                return Request.deserialize(bytes);
            }
        }
        export class Response extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                version?: string;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("version" in data && data.version != undefined) {
                        this.version = data.version;
                    }
                }
            }
            get version() {
                return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
            }
            set version(value: string) {
                pb_1.Message.setField(this, 1, value);
            }
            static fromObject(data: {
                version?: string;
            }): Response {
                const message = new Response({});
                if (data.version != null) {
                    message.version = data.version;
                }
                return message;
            }
            toObject() {
                const data: {
                    version?: string;
                } = {};
                if (this.version != null) {
                    data.version = this.version;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.version.length)
                    writer.writeString(1, this.version);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Response {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Response();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.version = reader.readString();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): Response {
                return Response.deserialize(bytes);
            }
        }
    }
    export class Init extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): Init {
            const message = new Init({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Init {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Init();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Init {
            return Init.deserialize(bytes);
        }
    }
    export namespace Init {
        export class Request extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                spec?: Uint8Array;
                no_connection?: boolean;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("spec" in data && data.spec != undefined) {
                        this.spec = data.spec;
                    }
                    if ("no_connection" in data && data.no_connection != undefined) {
                        this.no_connection = data.no_connection;
                    }
                }
            }
            get spec() {
                return pb_1.Message.getFieldWithDefault(this, 1, new Uint8Array(0)) as Uint8Array;
            }
            set spec(value: Uint8Array) {
                pb_1.Message.setField(this, 1, value);
            }
            get no_connection() {
                return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
            }
            set no_connection(value: boolean) {
                pb_1.Message.setField(this, 2, value);
            }
            static fromObject(data: {
                spec?: Uint8Array;
                no_connection?: boolean;
            }): Request {
                const message = new Request({});
                if (data.spec != null) {
                    message.spec = data.spec;
                }
                if (data.no_connection != null) {
                    message.no_connection = data.no_connection;
                }
                return message;
            }
            toObject() {
                const data: {
                    spec?: Uint8Array;
                    no_connection?: boolean;
                } = {};
                if (this.spec != null) {
                    data.spec = this.spec;
                }
                if (this.no_connection != null) {
                    data.no_connection = this.no_connection;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.spec.length)
                    writer.writeBytes(1, this.spec);
                if (this.no_connection != false)
                    writer.writeBool(2, this.no_connection);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Request {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Request();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.spec = reader.readBytes();
                            break;
                        case 2:
                            message.no_connection = reader.readBool();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): Request {
                return Request.deserialize(bytes);
            }
        }
        export class Response extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {}) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") { }
            }
            static fromObject(data: {}): Response {
                const message = new Response({});
                return message;
            }
            toObject() {
                const data: {} = {};
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Response {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Response();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): Response {
                return Response.deserialize(bytes);
            }
        }
    }
    export class GetTables extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): GetTables {
            const message = new GetTables({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetTables {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetTables();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetTables {
            return GetTables.deserialize(bytes);
        }
    }
    export namespace GetTables {
        export class Request extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                tables?: string[];
                skip_tables?: string[];
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1, 2], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("tables" in data && data.tables != undefined) {
                        this.tables = data.tables;
                    }
                    if ("skip_tables" in data && data.skip_tables != undefined) {
                        this.skip_tables = data.skip_tables;
                    }
                }
            }
            get tables() {
                return pb_1.Message.getFieldWithDefault(this, 1, []) as string[];
            }
            set tables(value: string[]) {
                pb_1.Message.setField(this, 1, value);
            }
            get skip_tables() {
                return pb_1.Message.getFieldWithDefault(this, 2, []) as string[];
            }
            set skip_tables(value: string[]) {
                pb_1.Message.setField(this, 2, value);
            }
            static fromObject(data: {
                tables?: string[];
                skip_tables?: string[];
            }): Request {
                const message = new Request({});
                if (data.tables != null) {
                    message.tables = data.tables;
                }
                if (data.skip_tables != null) {
                    message.skip_tables = data.skip_tables;
                }
                return message;
            }
            toObject() {
                const data: {
                    tables?: string[];
                    skip_tables?: string[];
                } = {};
                if (this.tables != null) {
                    data.tables = this.tables;
                }
                if (this.skip_tables != null) {
                    data.skip_tables = this.skip_tables;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.tables.length)
                    writer.writeRepeatedString(1, this.tables);
                if (this.skip_tables.length)
                    writer.writeRepeatedString(2, this.skip_tables);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Request {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Request();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            pb_1.Message.addToRepeatedField(message, 1, reader.readString());
                            break;
                        case 2:
                            pb_1.Message.addToRepeatedField(message, 2, reader.readString());
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): Request {
                return Request.deserialize(bytes);
            }
        }
        export class Response extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                tables?: Uint8Array[];
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("tables" in data && data.tables != undefined) {
                        this.tables = data.tables;
                    }
                }
            }
            get tables() {
                return pb_1.Message.getFieldWithDefault(this, 1, []) as Uint8Array[];
            }
            set tables(value: Uint8Array[]) {
                pb_1.Message.setField(this, 1, value);
            }
            static fromObject(data: {
                tables?: Uint8Array[];
            }): Response {
                const message = new Response({});
                if (data.tables != null) {
                    message.tables = data.tables;
                }
                return message;
            }
            toObject() {
                const data: {
                    tables?: Uint8Array[];
                } = {};
                if (this.tables != null) {
                    data.tables = this.tables;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.tables.length)
                    writer.writeRepeatedBytes(1, this.tables);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Response {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Response();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            pb_1.Message.addToRepeatedField(message, 1, reader.readBytes());
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): Response {
                return Response.deserialize(bytes);
            }
        }
    }
    export class Sync extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): Sync {
            const message = new Sync({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Sync {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Sync();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Sync {
            return Sync.deserialize(bytes);
        }
    }
    export namespace Sync {
        export class MessageInsert extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                record?: Uint8Array;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("record" in data && data.record != undefined) {
                        this.record = data.record;
                    }
                }
            }
            get record() {
                return pb_1.Message.getFieldWithDefault(this, 1, new Uint8Array(0)) as Uint8Array;
            }
            set record(value: Uint8Array) {
                pb_1.Message.setField(this, 1, value);
            }
            static fromObject(data: {
                record?: Uint8Array;
            }): MessageInsert {
                const message = new MessageInsert({});
                if (data.record != null) {
                    message.record = data.record;
                }
                return message;
            }
            toObject() {
                const data: {
                    record?: Uint8Array;
                } = {};
                if (this.record != null) {
                    data.record = this.record;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.record.length)
                    writer.writeBytes(1, this.record);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MessageInsert {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MessageInsert();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.record = reader.readBytes();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): MessageInsert {
                return MessageInsert.deserialize(bytes);
            }
        }
        export class MessageMigrateTable extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                table?: Uint8Array;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("table" in data && data.table != undefined) {
                        this.table = data.table;
                    }
                }
            }
            get table() {
                return pb_1.Message.getFieldWithDefault(this, 1, new Uint8Array(0)) as Uint8Array;
            }
            set table(value: Uint8Array) {
                pb_1.Message.setField(this, 1, value);
            }
            static fromObject(data: {
                table?: Uint8Array;
            }): MessageMigrateTable {
                const message = new MessageMigrateTable({});
                if (data.table != null) {
                    message.table = data.table;
                }
                return message;
            }
            toObject() {
                const data: {
                    table?: Uint8Array;
                } = {};
                if (this.table != null) {
                    data.table = this.table;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.table.length)
                    writer.writeBytes(1, this.table);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MessageMigrateTable {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MessageMigrateTable();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.table = reader.readBytes();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): MessageMigrateTable {
                return MessageMigrateTable.deserialize(bytes);
            }
        }
        export class BackendOptions extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                table_name?: string;
                connection?: string;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("table_name" in data && data.table_name != undefined) {
                        this.table_name = data.table_name;
                    }
                    if ("connection" in data && data.connection != undefined) {
                        this.connection = data.connection;
                    }
                }
            }
            get table_name() {
                return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
            }
            set table_name(value: string) {
                pb_1.Message.setField(this, 1, value);
            }
            get connection() {
                return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
            }
            set connection(value: string) {
                pb_1.Message.setField(this, 2, value);
            }
            static fromObject(data: {
                table_name?: string;
                connection?: string;
            }): BackendOptions {
                const message = new BackendOptions({});
                if (data.table_name != null) {
                    message.table_name = data.table_name;
                }
                if (data.connection != null) {
                    message.connection = data.connection;
                }
                return message;
            }
            toObject() {
                const data: {
                    table_name?: string;
                    connection?: string;
                } = {};
                if (this.table_name != null) {
                    data.table_name = this.table_name;
                }
                if (this.connection != null) {
                    data.connection = this.connection;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.table_name.length)
                    writer.writeString(1, this.table_name);
                if (this.connection.length)
                    writer.writeString(2, this.connection);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): BackendOptions {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new BackendOptions();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.table_name = reader.readString();
                            break;
                        case 2:
                            message.connection = reader.readString();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): BackendOptions {
                return BackendOptions.deserialize(bytes);
            }
        }
        export class Request extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                tables?: string[];
                skip_tables?: string[];
                skip_dependent_tables?: boolean;
                deterministic_cq_id?: boolean;
                backend?: Sync.BackendOptions;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1, 2], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("tables" in data && data.tables != undefined) {
                        this.tables = data.tables;
                    }
                    if ("skip_tables" in data && data.skip_tables != undefined) {
                        this.skip_tables = data.skip_tables;
                    }
                    if ("skip_dependent_tables" in data && data.skip_dependent_tables != undefined) {
                        this.skip_dependent_tables = data.skip_dependent_tables;
                    }
                    if ("deterministic_cq_id" in data && data.deterministic_cq_id != undefined) {
                        this.deterministic_cq_id = data.deterministic_cq_id;
                    }
                    if ("backend" in data && data.backend != undefined) {
                        this.backend = data.backend;
                    }
                }
            }
            get tables() {
                return pb_1.Message.getFieldWithDefault(this, 1, []) as string[];
            }
            set tables(value: string[]) {
                pb_1.Message.setField(this, 1, value);
            }
            get skip_tables() {
                return pb_1.Message.getFieldWithDefault(this, 2, []) as string[];
            }
            set skip_tables(value: string[]) {
                pb_1.Message.setField(this, 2, value);
            }
            get skip_dependent_tables() {
                return pb_1.Message.getFieldWithDefault(this, 3, false) as boolean;
            }
            set skip_dependent_tables(value: boolean) {
                pb_1.Message.setField(this, 3, value);
            }
            get deterministic_cq_id() {
                return pb_1.Message.getFieldWithDefault(this, 4, false) as boolean;
            }
            set deterministic_cq_id(value: boolean) {
                pb_1.Message.setField(this, 4, value);
            }
            get backend() {
                return pb_1.Message.getWrapperField(this, Sync.BackendOptions, 5) as Sync.BackendOptions;
            }
            set backend(value: Sync.BackendOptions) {
                pb_1.Message.setWrapperField(this, 5, value);
            }
            get has_backend() {
                return pb_1.Message.getField(this, 5) != null;
            }
            static fromObject(data: {
                tables?: string[];
                skip_tables?: string[];
                skip_dependent_tables?: boolean;
                deterministic_cq_id?: boolean;
                backend?: ReturnType<typeof Sync.BackendOptions.prototype.toObject>;
            }): Request {
                const message = new Request({});
                if (data.tables != null) {
                    message.tables = data.tables;
                }
                if (data.skip_tables != null) {
                    message.skip_tables = data.skip_tables;
                }
                if (data.skip_dependent_tables != null) {
                    message.skip_dependent_tables = data.skip_dependent_tables;
                }
                if (data.deterministic_cq_id != null) {
                    message.deterministic_cq_id = data.deterministic_cq_id;
                }
                if (data.backend != null) {
                    message.backend = Sync.BackendOptions.fromObject(data.backend);
                }
                return message;
            }
            toObject() {
                const data: {
                    tables?: string[];
                    skip_tables?: string[];
                    skip_dependent_tables?: boolean;
                    deterministic_cq_id?: boolean;
                    backend?: ReturnType<typeof Sync.BackendOptions.prototype.toObject>;
                } = {};
                if (this.tables != null) {
                    data.tables = this.tables;
                }
                if (this.skip_tables != null) {
                    data.skip_tables = this.skip_tables;
                }
                if (this.skip_dependent_tables != null) {
                    data.skip_dependent_tables = this.skip_dependent_tables;
                }
                if (this.deterministic_cq_id != null) {
                    data.deterministic_cq_id = this.deterministic_cq_id;
                }
                if (this.backend != null) {
                    data.backend = this.backend.toObject();
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.tables.length)
                    writer.writeRepeatedString(1, this.tables);
                if (this.skip_tables.length)
                    writer.writeRepeatedString(2, this.skip_tables);
                if (this.skip_dependent_tables != false)
                    writer.writeBool(3, this.skip_dependent_tables);
                if (this.deterministic_cq_id != false)
                    writer.writeBool(4, this.deterministic_cq_id);
                if (this.has_backend)
                    writer.writeMessage(5, this.backend, () => this.backend.serialize(writer));
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Request {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Request();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            pb_1.Message.addToRepeatedField(message, 1, reader.readString());
                            break;
                        case 2:
                            pb_1.Message.addToRepeatedField(message, 2, reader.readString());
                            break;
                        case 3:
                            message.skip_dependent_tables = reader.readBool();
                            break;
                        case 4:
                            message.deterministic_cq_id = reader.readBool();
                            break;
                        case 5:
                            reader.readMessage(message.backend, () => message.backend = Sync.BackendOptions.deserialize(reader));
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): Request {
                return Request.deserialize(bytes);
            }
        }
        export class Response extends pb_1.Message {
            #one_of_decls: number[][] = [[1, 2]];
            constructor(data?: any[] | ({} & (({
                migrate_table?: Sync.MessageMigrateTable;
                insert?: never;
            } | {
                migrate_table?: never;
                insert?: Sync.MessageInsert;
            })))) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("migrate_table" in data && data.migrate_table != undefined) {
                        this.migrate_table = data.migrate_table;
                    }
                    if ("insert" in data && data.insert != undefined) {
                        this.insert = data.insert;
                    }
                }
            }
            get migrate_table() {
                return pb_1.Message.getWrapperField(this, Sync.MessageMigrateTable, 1) as Sync.MessageMigrateTable;
            }
            set migrate_table(value: Sync.MessageMigrateTable) {
                pb_1.Message.setOneofWrapperField(this, 1, this.#one_of_decls[0], value);
            }
            get has_migrate_table() {
                return pb_1.Message.getField(this, 1) != null;
            }
            get insert() {
                return pb_1.Message.getWrapperField(this, Sync.MessageInsert, 2) as Sync.MessageInsert;
            }
            set insert(value: Sync.MessageInsert) {
                pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[0], value);
            }
            get has_insert() {
                return pb_1.Message.getField(this, 2) != null;
            }
            get message() {
                const cases: {
                    [index: number]: "none" | "migrate_table" | "insert";
                } = {
                    0: "none",
                    1: "migrate_table",
                    2: "insert"
                };
                return cases[pb_1.Message.computeOneofCase(this, [1, 2])];
            }
            static fromObject(data: {
                migrate_table?: ReturnType<typeof Sync.MessageMigrateTable.prototype.toObject>;
                insert?: ReturnType<typeof Sync.MessageInsert.prototype.toObject>;
            }): Response {
                const message = new Response({});
                if (data.migrate_table != null) {
                    message.migrate_table = Sync.MessageMigrateTable.fromObject(data.migrate_table);
                }
                if (data.insert != null) {
                    message.insert = Sync.MessageInsert.fromObject(data.insert);
                }
                return message;
            }
            toObject() {
                const data: {
                    migrate_table?: ReturnType<typeof Sync.MessageMigrateTable.prototype.toObject>;
                    insert?: ReturnType<typeof Sync.MessageInsert.prototype.toObject>;
                } = {};
                if (this.migrate_table != null) {
                    data.migrate_table = this.migrate_table.toObject();
                }
                if (this.insert != null) {
                    data.insert = this.insert.toObject();
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.has_migrate_table)
                    writer.writeMessage(1, this.migrate_table, () => this.migrate_table.serialize(writer));
                if (this.has_insert)
                    writer.writeMessage(2, this.insert, () => this.insert.serialize(writer));
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Response {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Response();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            reader.readMessage(message.migrate_table, () => message.migrate_table = Sync.MessageMigrateTable.deserialize(reader));
                            break;
                        case 2:
                            reader.readMessage(message.insert, () => message.insert = Sync.MessageInsert.deserialize(reader));
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): Response {
                return Response.deserialize(bytes);
            }
        }
    }
    export class Read extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): Read {
            const message = new Read({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Read {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Read();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Read {
            return Read.deserialize(bytes);
        }
    }
    export namespace Read {
        export class Request extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                table?: Uint8Array;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("table" in data && data.table != undefined) {
                        this.table = data.table;
                    }
                }
            }
            get table() {
                return pb_1.Message.getFieldWithDefault(this, 1, new Uint8Array(0)) as Uint8Array;
            }
            set table(value: Uint8Array) {
                pb_1.Message.setField(this, 1, value);
            }
            static fromObject(data: {
                table?: Uint8Array;
            }): Request {
                const message = new Request({});
                if (data.table != null) {
                    message.table = data.table;
                }
                return message;
            }
            toObject() {
                const data: {
                    table?: Uint8Array;
                } = {};
                if (this.table != null) {
                    data.table = this.table;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.table.length)
                    writer.writeBytes(1, this.table);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Request {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Request();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.table = reader.readBytes();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): Request {
                return Request.deserialize(bytes);
            }
        }
        export class Response extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                record?: Uint8Array;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("record" in data && data.record != undefined) {
                        this.record = data.record;
                    }
                }
            }
            get record() {
                return pb_1.Message.getFieldWithDefault(this, 1, new Uint8Array(0)) as Uint8Array;
            }
            set record(value: Uint8Array) {
                pb_1.Message.setField(this, 1, value);
            }
            static fromObject(data: {
                record?: Uint8Array;
            }): Response {
                const message = new Response({});
                if (data.record != null) {
                    message.record = data.record;
                }
                return message;
            }
            toObject() {
                const data: {
                    record?: Uint8Array;
                } = {};
                if (this.record != null) {
                    data.record = this.record;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.record.length)
                    writer.writeBytes(1, this.record);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Response {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Response();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.record = reader.readBytes();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): Response {
                return Response.deserialize(bytes);
            }
        }
    }
    export class Write extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): Write {
            const message = new Write({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Write {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Write();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Write {
            return Write.deserialize(bytes);
        }
    }
    export namespace Write {
        export class MessageMigrateTable extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                table?: Uint8Array;
                migrate_force?: boolean;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("table" in data && data.table != undefined) {
                        this.table = data.table;
                    }
                    if ("migrate_force" in data && data.migrate_force != undefined) {
                        this.migrate_force = data.migrate_force;
                    }
                }
            }
            get table() {
                return pb_1.Message.getFieldWithDefault(this, 1, new Uint8Array(0)) as Uint8Array;
            }
            set table(value: Uint8Array) {
                pb_1.Message.setField(this, 1, value);
            }
            get migrate_force() {
                return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
            }
            set migrate_force(value: boolean) {
                pb_1.Message.setField(this, 2, value);
            }
            static fromObject(data: {
                table?: Uint8Array;
                migrate_force?: boolean;
            }): MessageMigrateTable {
                const message = new MessageMigrateTable({});
                if (data.table != null) {
                    message.table = data.table;
                }
                if (data.migrate_force != null) {
                    message.migrate_force = data.migrate_force;
                }
                return message;
            }
            toObject() {
                const data: {
                    table?: Uint8Array;
                    migrate_force?: boolean;
                } = {};
                if (this.table != null) {
                    data.table = this.table;
                }
                if (this.migrate_force != null) {
                    data.migrate_force = this.migrate_force;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.table.length)
                    writer.writeBytes(1, this.table);
                if (this.migrate_force != false)
                    writer.writeBool(2, this.migrate_force);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MessageMigrateTable {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MessageMigrateTable();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.table = reader.readBytes();
                            break;
                        case 2:
                            message.migrate_force = reader.readBool();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): MessageMigrateTable {
                return MessageMigrateTable.deserialize(bytes);
            }
        }
        export class MessageInsert extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                record?: Uint8Array;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("record" in data && data.record != undefined) {
                        this.record = data.record;
                    }
                }
            }
            get record() {
                return pb_1.Message.getFieldWithDefault(this, 1, new Uint8Array(0)) as Uint8Array;
            }
            set record(value: Uint8Array) {
                pb_1.Message.setField(this, 1, value);
            }
            static fromObject(data: {
                record?: Uint8Array;
            }): MessageInsert {
                const message = new MessageInsert({});
                if (data.record != null) {
                    message.record = data.record;
                }
                return message;
            }
            toObject() {
                const data: {
                    record?: Uint8Array;
                } = {};
                if (this.record != null) {
                    data.record = this.record;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.record.length)
                    writer.writeBytes(1, this.record);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MessageInsert {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MessageInsert();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.record = reader.readBytes();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): MessageInsert {
                return MessageInsert.deserialize(bytes);
            }
        }
        export class MessageDeleteStale extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                /** @deprecated*/
                table?: Uint8Array;
                source_name?: string;
                sync_time?: dependency_1.google.protobuf.Timestamp;
                table_name?: string;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("table" in data && data.table != undefined) {
                        this.table = data.table;
                    }
                    if ("source_name" in data && data.source_name != undefined) {
                        this.source_name = data.source_name;
                    }
                    if ("sync_time" in data && data.sync_time != undefined) {
                        this.sync_time = data.sync_time;
                    }
                    if ("table_name" in data && data.table_name != undefined) {
                        this.table_name = data.table_name;
                    }
                }
            }
            /** @deprecated*/
            get table() {
                return pb_1.Message.getFieldWithDefault(this, 1, new Uint8Array(0)) as Uint8Array;
            }
            /** @deprecated*/
            set table(value: Uint8Array) {
                pb_1.Message.setField(this, 1, value);
            }
            get source_name() {
                return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
            }
            set source_name(value: string) {
                pb_1.Message.setField(this, 2, value);
            }
            get sync_time() {
                return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Timestamp, 3) as dependency_1.google.protobuf.Timestamp;
            }
            set sync_time(value: dependency_1.google.protobuf.Timestamp) {
                pb_1.Message.setWrapperField(this, 3, value);
            }
            get has_sync_time() {
                return pb_1.Message.getField(this, 3) != null;
            }
            get table_name() {
                return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
            }
            set table_name(value: string) {
                pb_1.Message.setField(this, 4, value);
            }
            static fromObject(data: {
                table?: Uint8Array;
                source_name?: string;
                sync_time?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
                table_name?: string;
            }): MessageDeleteStale {
                const message = new MessageDeleteStale({});
                if (data.table != null) {
                    message.table = data.table;
                }
                if (data.source_name != null) {
                    message.source_name = data.source_name;
                }
                if (data.sync_time != null) {
                    message.sync_time = dependency_1.google.protobuf.Timestamp.fromObject(data.sync_time);
                }
                if (data.table_name != null) {
                    message.table_name = data.table_name;
                }
                return message;
            }
            toObject() {
                const data: {
                    table?: Uint8Array;
                    source_name?: string;
                    sync_time?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
                    table_name?: string;
                } = {};
                if (this.table != null) {
                    data.table = this.table;
                }
                if (this.source_name != null) {
                    data.source_name = this.source_name;
                }
                if (this.sync_time != null) {
                    data.sync_time = this.sync_time.toObject();
                }
                if (this.table_name != null) {
                    data.table_name = this.table_name;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.table.length)
                    writer.writeBytes(1, this.table);
                if (this.source_name.length)
                    writer.writeString(2, this.source_name);
                if (this.has_sync_time)
                    writer.writeMessage(3, this.sync_time, () => this.sync_time.serialize(writer));
                if (this.table_name.length)
                    writer.writeString(4, this.table_name);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MessageDeleteStale {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MessageDeleteStale();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.table = reader.readBytes();
                            break;
                        case 2:
                            message.source_name = reader.readString();
                            break;
                        case 3:
                            reader.readMessage(message.sync_time, () => message.sync_time = dependency_1.google.protobuf.Timestamp.deserialize(reader));
                            break;
                        case 4:
                            message.table_name = reader.readString();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): MessageDeleteStale {
                return MessageDeleteStale.deserialize(bytes);
            }
        }
        export class Request extends pb_1.Message {
            #one_of_decls: number[][] = [[1, 2, 3]];
            constructor(data?: any[] | ({} & (({
                migrate_table?: Write.MessageMigrateTable;
                insert?: never;
                delete?: never;
            } | {
                migrate_table?: never;
                insert?: Write.MessageInsert;
                delete?: never;
            } | {
                migrate_table?: never;
                insert?: never;
                delete?: Write.MessageDeleteStale;
            })))) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("migrate_table" in data && data.migrate_table != undefined) {
                        this.migrate_table = data.migrate_table;
                    }
                    if ("insert" in data && data.insert != undefined) {
                        this.insert = data.insert;
                    }
                    if ("delete" in data && data.delete != undefined) {
                        this.delete = data.delete;
                    }
                }
            }
            get migrate_table() {
                return pb_1.Message.getWrapperField(this, Write.MessageMigrateTable, 1) as Write.MessageMigrateTable;
            }
            set migrate_table(value: Write.MessageMigrateTable) {
                pb_1.Message.setOneofWrapperField(this, 1, this.#one_of_decls[0], value);
            }
            get has_migrate_table() {
                return pb_1.Message.getField(this, 1) != null;
            }
            get insert() {
                return pb_1.Message.getWrapperField(this, Write.MessageInsert, 2) as Write.MessageInsert;
            }
            set insert(value: Write.MessageInsert) {
                pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[0], value);
            }
            get has_insert() {
                return pb_1.Message.getField(this, 2) != null;
            }
            get delete() {
                return pb_1.Message.getWrapperField(this, Write.MessageDeleteStale, 3) as Write.MessageDeleteStale;
            }
            set delete(value: Write.MessageDeleteStale) {
                pb_1.Message.setOneofWrapperField(this, 3, this.#one_of_decls[0], value);
            }
            get has_delete() {
                return pb_1.Message.getField(this, 3) != null;
            }
            get message() {
                const cases: {
                    [index: number]: "none" | "migrate_table" | "insert" | "delete";
                } = {
                    0: "none",
                    1: "migrate_table",
                    2: "insert",
                    3: "delete"
                };
                return cases[pb_1.Message.computeOneofCase(this, [1, 2, 3])];
            }
            static fromObject(data: {
                migrate_table?: ReturnType<typeof Write.MessageMigrateTable.prototype.toObject>;
                insert?: ReturnType<typeof Write.MessageInsert.prototype.toObject>;
                delete?: ReturnType<typeof Write.MessageDeleteStale.prototype.toObject>;
            }): Request {
                const message = new Request({});
                if (data.migrate_table != null) {
                    message.migrate_table = Write.MessageMigrateTable.fromObject(data.migrate_table);
                }
                if (data.insert != null) {
                    message.insert = Write.MessageInsert.fromObject(data.insert);
                }
                if (data.delete != null) {
                    message.delete = Write.MessageDeleteStale.fromObject(data.delete);
                }
                return message;
            }
            toObject() {
                const data: {
                    migrate_table?: ReturnType<typeof Write.MessageMigrateTable.prototype.toObject>;
                    insert?: ReturnType<typeof Write.MessageInsert.prototype.toObject>;
                    delete?: ReturnType<typeof Write.MessageDeleteStale.prototype.toObject>;
                } = {};
                if (this.migrate_table != null) {
                    data.migrate_table = this.migrate_table.toObject();
                }
                if (this.insert != null) {
                    data.insert = this.insert.toObject();
                }
                if (this.delete != null) {
                    data.delete = this.delete.toObject();
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.has_migrate_table)
                    writer.writeMessage(1, this.migrate_table, () => this.migrate_table.serialize(writer));
                if (this.has_insert)
                    writer.writeMessage(2, this.insert, () => this.insert.serialize(writer));
                if (this.has_delete)
                    writer.writeMessage(3, this.delete, () => this.delete.serialize(writer));
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Request {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Request();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            reader.readMessage(message.migrate_table, () => message.migrate_table = Write.MessageMigrateTable.deserialize(reader));
                            break;
                        case 2:
                            reader.readMessage(message.insert, () => message.insert = Write.MessageInsert.deserialize(reader));
                            break;
                        case 3:
                            reader.readMessage(message.delete, () => message.delete = Write.MessageDeleteStale.deserialize(reader));
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): Request {
                return Request.deserialize(bytes);
            }
        }
        export class Response extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {}) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") { }
            }
            static fromObject(data: {}): Response {
                const message = new Response({});
                return message;
            }
            toObject() {
                const data: {} = {};
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Response {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Response();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): Response {
                return Response.deserialize(bytes);
            }
        }
    }
    export class Close extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): Close {
            const message = new Close({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Close {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Close();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Close {
            return Close.deserialize(bytes);
        }
    }
    export namespace Close {
        export class Request extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {}) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") { }
            }
            static fromObject(data: {}): Request {
                const message = new Request({});
                return message;
            }
            toObject() {
                const data: {} = {};
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Request {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Request();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): Request {
                return Request.deserialize(bytes);
            }
        }
        export class Response extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {}) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") { }
            }
            static fromObject(data: {}): Response {
                const message = new Response({});
                return message;
            }
            toObject() {
                const data: {} = {};
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Response {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Response();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): Response {
                return Response.deserialize(bytes);
            }
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedPluginService {
        static definition = {
            GetName: {
                path: "/cloudquery.plugin.v3.Plugin/GetName",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GetName.Request) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GetName.Request.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: GetName.Response) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => GetName.Response.deserialize(new Uint8Array(bytes))
            },
            GetVersion: {
                path: "/cloudquery.plugin.v3.Plugin/GetVersion",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GetVersion.Request) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GetVersion.Request.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: GetVersion.Response) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => GetVersion.Response.deserialize(new Uint8Array(bytes))
            },
            Init: {
                path: "/cloudquery.plugin.v3.Plugin/Init",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: Init.Request) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => Init.Request.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: Init.Response) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => Init.Response.deserialize(new Uint8Array(bytes))
            },
            GetTables: {
                path: "/cloudquery.plugin.v3.Plugin/GetTables",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GetTables.Request) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GetTables.Request.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: GetTables.Response) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => GetTables.Response.deserialize(new Uint8Array(bytes))
            },
            Sync: {
                path: "/cloudquery.plugin.v3.Plugin/Sync",
                requestStream: false,
                responseStream: true,
                requestSerialize: (message: Sync.Request) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => Sync.Request.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: Sync.Response) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => Sync.Response.deserialize(new Uint8Array(bytes))
            },
            Read: {
                path: "/cloudquery.plugin.v3.Plugin/Read",
                requestStream: false,
                responseStream: true,
                requestSerialize: (message: Read.Request) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => Read.Request.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: Read.Response) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => Read.Response.deserialize(new Uint8Array(bytes))
            },
            Write: {
                path: "/cloudquery.plugin.v3.Plugin/Write",
                requestStream: true,
                responseStream: false,
                requestSerialize: (message: Write.Request) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => Write.Request.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: Write.Response) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => Write.Response.deserialize(new Uint8Array(bytes))
            },
            Close: {
                path: "/cloudquery.plugin.v3.Plugin/Close",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: Close.Request) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => Close.Request.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: Close.Response) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => Close.Response.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract GetName(call: grpc_1.ServerUnaryCall<GetName.Request, GetName.Response>, callback: grpc_1.sendUnaryData<GetName.Response>): void;
        abstract GetVersion(call: grpc_1.ServerUnaryCall<GetVersion.Request, GetVersion.Response>, callback: grpc_1.sendUnaryData<GetVersion.Response>): void;
        abstract Init(call: grpc_1.ServerUnaryCall<Init.Request, Init.Response>, callback: grpc_1.sendUnaryData<Init.Response>): void;
        abstract GetTables(call: grpc_1.ServerUnaryCall<GetTables.Request, GetTables.Response>, callback: grpc_1.sendUnaryData<GetTables.Response>): void;
        abstract Sync(call: grpc_1.ServerWritableStream<Sync.Request, Sync.Response>): void;
        abstract Read(call: grpc_1.ServerWritableStream<Read.Request, Read.Response>): void;
        abstract Write(call: grpc_1.ServerReadableStream<Write.Request, Write.Response>, callback: grpc_1.sendUnaryData<Write.Response>): void;
        abstract Close(call: grpc_1.ServerUnaryCall<Close.Request, Close.Response>, callback: grpc_1.sendUnaryData<Close.Response>): void;
    }
    export class PluginClient extends grpc_1.makeGenericClientConstructor(UnimplementedPluginService.definition, "Plugin", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        GetName: GrpcUnaryServiceInterface<GetName.Request, GetName.Response> = (message: GetName.Request, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<GetName.Response>, options?: grpc_1.CallOptions | grpc_1.requestCallback<GetName.Response>, callback?: grpc_1.requestCallback<GetName.Response>): grpc_1.ClientUnaryCall => {
            return super.GetName(message, metadata, options, callback);
        };
        GetVersion: GrpcUnaryServiceInterface<GetVersion.Request, GetVersion.Response> = (message: GetVersion.Request, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<GetVersion.Response>, options?: grpc_1.CallOptions | grpc_1.requestCallback<GetVersion.Response>, callback?: grpc_1.requestCallback<GetVersion.Response>): grpc_1.ClientUnaryCall => {
            return super.GetVersion(message, metadata, options, callback);
        };
        Init: GrpcUnaryServiceInterface<Init.Request, Init.Response> = (message: Init.Request, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<Init.Response>, options?: grpc_1.CallOptions | grpc_1.requestCallback<Init.Response>, callback?: grpc_1.requestCallback<Init.Response>): grpc_1.ClientUnaryCall => {
            return super.Init(message, metadata, options, callback);
        };
        GetTables: GrpcUnaryServiceInterface<GetTables.Request, GetTables.Response> = (message: GetTables.Request, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<GetTables.Response>, options?: grpc_1.CallOptions | grpc_1.requestCallback<GetTables.Response>, callback?: grpc_1.requestCallback<GetTables.Response>): grpc_1.ClientUnaryCall => {
            return super.GetTables(message, metadata, options, callback);
        };
        Sync: GrpcStreamServiceInterface<Sync.Request, Sync.Request> = (message: Sync.Request, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<Sync.Request> => {
            return super.Sync(message, metadata, options);
        };
        Read: GrpcStreamServiceInterface<Read.Request, Read.Request> = (message: Read.Request, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<Read.Request> => {
            return super.Read(message, metadata, options);
        };
        Write: GrpWritableServiceInterface<Write.Request, Write.Response> = (metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<Write.Response>, options?: grpc_1.CallOptions | grpc_1.requestCallback<Write.Response>, callback?: grpc_1.requestCallback<Write.Response>): grpc_1.ClientWritableStream<Write.Request> => {
            return super.Write(metadata, options, callback);
        };
        Close: GrpcUnaryServiceInterface<Close.Request, Close.Response> = (message: Close.Request, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<Close.Response>, options?: grpc_1.CallOptions | grpc_1.requestCallback<Close.Response>, callback?: grpc_1.requestCallback<Close.Response>): grpc_1.ClientUnaryCall => {
            return super.Close(message, metadata, options, callback);
        };
    }
}
