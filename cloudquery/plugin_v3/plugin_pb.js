// source: cloudquery/plugin_v3/plugin.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() {
  if (this) { return this; }
  if (typeof window !== 'undefined') { return window; }
  if (typeof global !== 'undefined') { return global; }
  if (typeof self !== 'undefined') { return self; }
  return Function('return this')();
}.call(null));

var google_protobuf_timestamp_pb = require('google-protobuf/google/protobuf/timestamp_pb.js');
goog.object.extend(proto, google_protobuf_timestamp_pb);
goog.exportSymbol('proto.cloudquery.plugin.v3.Close', null, global);
goog.exportSymbol('proto.cloudquery.plugin.v3.Close.Request', null, global);
goog.exportSymbol('proto.cloudquery.plugin.v3.Close.Response', null, global);
goog.exportSymbol('proto.cloudquery.plugin.v3.GetName', null, global);
goog.exportSymbol('proto.cloudquery.plugin.v3.GetName.Request', null, global);
goog.exportSymbol('proto.cloudquery.plugin.v3.GetName.Response', null, global);
goog.exportSymbol('proto.cloudquery.plugin.v3.GetTables', null, global);
goog.exportSymbol('proto.cloudquery.plugin.v3.GetTables.Request', null, global);
goog.exportSymbol('proto.cloudquery.plugin.v3.GetTables.Response', null, global);
goog.exportSymbol('proto.cloudquery.plugin.v3.GetVersion', null, global);
goog.exportSymbol('proto.cloudquery.plugin.v3.GetVersion.Request', null, global);
goog.exportSymbol('proto.cloudquery.plugin.v3.GetVersion.Response', null, global);
goog.exportSymbol('proto.cloudquery.plugin.v3.Init', null, global);
goog.exportSymbol('proto.cloudquery.plugin.v3.Init.Request', null, global);
goog.exportSymbol('proto.cloudquery.plugin.v3.Init.Response', null, global);
goog.exportSymbol('proto.cloudquery.plugin.v3.Read', null, global);
goog.exportSymbol('proto.cloudquery.plugin.v3.Read.Request', null, global);
goog.exportSymbol('proto.cloudquery.plugin.v3.Read.Response', null, global);
goog.exportSymbol('proto.cloudquery.plugin.v3.Sync', null, global);
goog.exportSymbol('proto.cloudquery.plugin.v3.Sync.BackendOptions', null, global);
goog.exportSymbol('proto.cloudquery.plugin.v3.Sync.MessageInsert', null, global);
goog.exportSymbol('proto.cloudquery.plugin.v3.Sync.MessageMigrateTable', null, global);
goog.exportSymbol('proto.cloudquery.plugin.v3.Sync.Request', null, global);
goog.exportSymbol('proto.cloudquery.plugin.v3.Sync.Response', null, global);
goog.exportSymbol('proto.cloudquery.plugin.v3.Sync.Response.MessageCase', null, global);
goog.exportSymbol('proto.cloudquery.plugin.v3.Write', null, global);
goog.exportSymbol('proto.cloudquery.plugin.v3.Write.MessageDeleteStale', null, global);
goog.exportSymbol('proto.cloudquery.plugin.v3.Write.MessageInsert', null, global);
goog.exportSymbol('proto.cloudquery.plugin.v3.Write.MessageMigrateTable', null, global);
goog.exportSymbol('proto.cloudquery.plugin.v3.Write.Request', null, global);
goog.exportSymbol('proto.cloudquery.plugin.v3.Write.Request.MessageCase', null, global);
goog.exportSymbol('proto.cloudquery.plugin.v3.Write.Response', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cloudquery.plugin.v3.GetName = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cloudquery.plugin.v3.GetName, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cloudquery.plugin.v3.GetName.displayName = 'proto.cloudquery.plugin.v3.GetName';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cloudquery.plugin.v3.GetName.Request = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cloudquery.plugin.v3.GetName.Request, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cloudquery.plugin.v3.GetName.Request.displayName = 'proto.cloudquery.plugin.v3.GetName.Request';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cloudquery.plugin.v3.GetName.Response = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cloudquery.plugin.v3.GetName.Response, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cloudquery.plugin.v3.GetName.Response.displayName = 'proto.cloudquery.plugin.v3.GetName.Response';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cloudquery.plugin.v3.GetVersion = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cloudquery.plugin.v3.GetVersion, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cloudquery.plugin.v3.GetVersion.displayName = 'proto.cloudquery.plugin.v3.GetVersion';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cloudquery.plugin.v3.GetVersion.Request = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cloudquery.plugin.v3.GetVersion.Request, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cloudquery.plugin.v3.GetVersion.Request.displayName = 'proto.cloudquery.plugin.v3.GetVersion.Request';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cloudquery.plugin.v3.GetVersion.Response = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cloudquery.plugin.v3.GetVersion.Response, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cloudquery.plugin.v3.GetVersion.Response.displayName = 'proto.cloudquery.plugin.v3.GetVersion.Response';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cloudquery.plugin.v3.Init = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cloudquery.plugin.v3.Init, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cloudquery.plugin.v3.Init.displayName = 'proto.cloudquery.plugin.v3.Init';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cloudquery.plugin.v3.Init.Request = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cloudquery.plugin.v3.Init.Request, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cloudquery.plugin.v3.Init.Request.displayName = 'proto.cloudquery.plugin.v3.Init.Request';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cloudquery.plugin.v3.Init.Response = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cloudquery.plugin.v3.Init.Response, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cloudquery.plugin.v3.Init.Response.displayName = 'proto.cloudquery.plugin.v3.Init.Response';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cloudquery.plugin.v3.GetTables = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cloudquery.plugin.v3.GetTables, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cloudquery.plugin.v3.GetTables.displayName = 'proto.cloudquery.plugin.v3.GetTables';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cloudquery.plugin.v3.GetTables.Request = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.cloudquery.plugin.v3.GetTables.Request.repeatedFields_, null);
};
goog.inherits(proto.cloudquery.plugin.v3.GetTables.Request, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cloudquery.plugin.v3.GetTables.Request.displayName = 'proto.cloudquery.plugin.v3.GetTables.Request';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cloudquery.plugin.v3.GetTables.Response = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.cloudquery.plugin.v3.GetTables.Response.repeatedFields_, null);
};
goog.inherits(proto.cloudquery.plugin.v3.GetTables.Response, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cloudquery.plugin.v3.GetTables.Response.displayName = 'proto.cloudquery.plugin.v3.GetTables.Response';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cloudquery.plugin.v3.Sync = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cloudquery.plugin.v3.Sync, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cloudquery.plugin.v3.Sync.displayName = 'proto.cloudquery.plugin.v3.Sync';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cloudquery.plugin.v3.Sync.MessageInsert = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cloudquery.plugin.v3.Sync.MessageInsert, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cloudquery.plugin.v3.Sync.MessageInsert.displayName = 'proto.cloudquery.plugin.v3.Sync.MessageInsert';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cloudquery.plugin.v3.Sync.MessageMigrateTable = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cloudquery.plugin.v3.Sync.MessageMigrateTable, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cloudquery.plugin.v3.Sync.MessageMigrateTable.displayName = 'proto.cloudquery.plugin.v3.Sync.MessageMigrateTable';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cloudquery.plugin.v3.Sync.BackendOptions = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cloudquery.plugin.v3.Sync.BackendOptions, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cloudquery.plugin.v3.Sync.BackendOptions.displayName = 'proto.cloudquery.plugin.v3.Sync.BackendOptions';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cloudquery.plugin.v3.Sync.Request = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.cloudquery.plugin.v3.Sync.Request.repeatedFields_, null);
};
goog.inherits(proto.cloudquery.plugin.v3.Sync.Request, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cloudquery.plugin.v3.Sync.Request.displayName = 'proto.cloudquery.plugin.v3.Sync.Request';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cloudquery.plugin.v3.Sync.Response = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.cloudquery.plugin.v3.Sync.Response.oneofGroups_);
};
goog.inherits(proto.cloudquery.plugin.v3.Sync.Response, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cloudquery.plugin.v3.Sync.Response.displayName = 'proto.cloudquery.plugin.v3.Sync.Response';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cloudquery.plugin.v3.Read = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cloudquery.plugin.v3.Read, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cloudquery.plugin.v3.Read.displayName = 'proto.cloudquery.plugin.v3.Read';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cloudquery.plugin.v3.Read.Request = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cloudquery.plugin.v3.Read.Request, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cloudquery.plugin.v3.Read.Request.displayName = 'proto.cloudquery.plugin.v3.Read.Request';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cloudquery.plugin.v3.Read.Response = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cloudquery.plugin.v3.Read.Response, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cloudquery.plugin.v3.Read.Response.displayName = 'proto.cloudquery.plugin.v3.Read.Response';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cloudquery.plugin.v3.Write = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cloudquery.plugin.v3.Write, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cloudquery.plugin.v3.Write.displayName = 'proto.cloudquery.plugin.v3.Write';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cloudquery.plugin.v3.Write.MessageMigrateTable = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cloudquery.plugin.v3.Write.MessageMigrateTable, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cloudquery.plugin.v3.Write.MessageMigrateTable.displayName = 'proto.cloudquery.plugin.v3.Write.MessageMigrateTable';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cloudquery.plugin.v3.Write.MessageInsert = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cloudquery.plugin.v3.Write.MessageInsert, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cloudquery.plugin.v3.Write.MessageInsert.displayName = 'proto.cloudquery.plugin.v3.Write.MessageInsert';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cloudquery.plugin.v3.Write.MessageDeleteStale = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cloudquery.plugin.v3.Write.MessageDeleteStale, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cloudquery.plugin.v3.Write.MessageDeleteStale.displayName = 'proto.cloudquery.plugin.v3.Write.MessageDeleteStale';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cloudquery.plugin.v3.Write.Request = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.cloudquery.plugin.v3.Write.Request.oneofGroups_);
};
goog.inherits(proto.cloudquery.plugin.v3.Write.Request, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cloudquery.plugin.v3.Write.Request.displayName = 'proto.cloudquery.plugin.v3.Write.Request';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cloudquery.plugin.v3.Write.Response = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cloudquery.plugin.v3.Write.Response, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cloudquery.plugin.v3.Write.Response.displayName = 'proto.cloudquery.plugin.v3.Write.Response';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cloudquery.plugin.v3.Close = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cloudquery.plugin.v3.Close, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cloudquery.plugin.v3.Close.displayName = 'proto.cloudquery.plugin.v3.Close';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cloudquery.plugin.v3.Close.Request = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cloudquery.plugin.v3.Close.Request, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cloudquery.plugin.v3.Close.Request.displayName = 'proto.cloudquery.plugin.v3.Close.Request';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cloudquery.plugin.v3.Close.Response = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cloudquery.plugin.v3.Close.Response, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cloudquery.plugin.v3.Close.Response.displayName = 'proto.cloudquery.plugin.v3.Close.Response';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cloudquery.plugin.v3.GetName.prototype.toObject = function(opt_includeInstance) {
  return proto.cloudquery.plugin.v3.GetName.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cloudquery.plugin.v3.GetName} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cloudquery.plugin.v3.GetName.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cloudquery.plugin.v3.GetName}
 */
proto.cloudquery.plugin.v3.GetName.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cloudquery.plugin.v3.GetName;
  return proto.cloudquery.plugin.v3.GetName.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cloudquery.plugin.v3.GetName} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cloudquery.plugin.v3.GetName}
 */
proto.cloudquery.plugin.v3.GetName.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cloudquery.plugin.v3.GetName.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cloudquery.plugin.v3.GetName.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cloudquery.plugin.v3.GetName} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cloudquery.plugin.v3.GetName.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cloudquery.plugin.v3.GetName.Request.prototype.toObject = function(opt_includeInstance) {
  return proto.cloudquery.plugin.v3.GetName.Request.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cloudquery.plugin.v3.GetName.Request} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cloudquery.plugin.v3.GetName.Request.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cloudquery.plugin.v3.GetName.Request}
 */
proto.cloudquery.plugin.v3.GetName.Request.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cloudquery.plugin.v3.GetName.Request;
  return proto.cloudquery.plugin.v3.GetName.Request.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cloudquery.plugin.v3.GetName.Request} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cloudquery.plugin.v3.GetName.Request}
 */
proto.cloudquery.plugin.v3.GetName.Request.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cloudquery.plugin.v3.GetName.Request.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cloudquery.plugin.v3.GetName.Request.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cloudquery.plugin.v3.GetName.Request} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cloudquery.plugin.v3.GetName.Request.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cloudquery.plugin.v3.GetName.Response.prototype.toObject = function(opt_includeInstance) {
  return proto.cloudquery.plugin.v3.GetName.Response.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cloudquery.plugin.v3.GetName.Response} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cloudquery.plugin.v3.GetName.Response.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cloudquery.plugin.v3.GetName.Response}
 */
proto.cloudquery.plugin.v3.GetName.Response.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cloudquery.plugin.v3.GetName.Response;
  return proto.cloudquery.plugin.v3.GetName.Response.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cloudquery.plugin.v3.GetName.Response} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cloudquery.plugin.v3.GetName.Response}
 */
proto.cloudquery.plugin.v3.GetName.Response.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cloudquery.plugin.v3.GetName.Response.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cloudquery.plugin.v3.GetName.Response.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cloudquery.plugin.v3.GetName.Response} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cloudquery.plugin.v3.GetName.Response.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.cloudquery.plugin.v3.GetName.Response.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.cloudquery.plugin.v3.GetName.Response} returns this
 */
proto.cloudquery.plugin.v3.GetName.Response.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cloudquery.plugin.v3.GetVersion.prototype.toObject = function(opt_includeInstance) {
  return proto.cloudquery.plugin.v3.GetVersion.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cloudquery.plugin.v3.GetVersion} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cloudquery.plugin.v3.GetVersion.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cloudquery.plugin.v3.GetVersion}
 */
proto.cloudquery.plugin.v3.GetVersion.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cloudquery.plugin.v3.GetVersion;
  return proto.cloudquery.plugin.v3.GetVersion.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cloudquery.plugin.v3.GetVersion} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cloudquery.plugin.v3.GetVersion}
 */
proto.cloudquery.plugin.v3.GetVersion.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cloudquery.plugin.v3.GetVersion.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cloudquery.plugin.v3.GetVersion.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cloudquery.plugin.v3.GetVersion} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cloudquery.plugin.v3.GetVersion.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cloudquery.plugin.v3.GetVersion.Request.prototype.toObject = function(opt_includeInstance) {
  return proto.cloudquery.plugin.v3.GetVersion.Request.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cloudquery.plugin.v3.GetVersion.Request} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cloudquery.plugin.v3.GetVersion.Request.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cloudquery.plugin.v3.GetVersion.Request}
 */
proto.cloudquery.plugin.v3.GetVersion.Request.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cloudquery.plugin.v3.GetVersion.Request;
  return proto.cloudquery.plugin.v3.GetVersion.Request.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cloudquery.plugin.v3.GetVersion.Request} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cloudquery.plugin.v3.GetVersion.Request}
 */
proto.cloudquery.plugin.v3.GetVersion.Request.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cloudquery.plugin.v3.GetVersion.Request.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cloudquery.plugin.v3.GetVersion.Request.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cloudquery.plugin.v3.GetVersion.Request} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cloudquery.plugin.v3.GetVersion.Request.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cloudquery.plugin.v3.GetVersion.Response.prototype.toObject = function(opt_includeInstance) {
  return proto.cloudquery.plugin.v3.GetVersion.Response.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cloudquery.plugin.v3.GetVersion.Response} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cloudquery.plugin.v3.GetVersion.Response.toObject = function(includeInstance, msg) {
  var f, obj = {
    version: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cloudquery.plugin.v3.GetVersion.Response}
 */
proto.cloudquery.plugin.v3.GetVersion.Response.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cloudquery.plugin.v3.GetVersion.Response;
  return proto.cloudquery.plugin.v3.GetVersion.Response.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cloudquery.plugin.v3.GetVersion.Response} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cloudquery.plugin.v3.GetVersion.Response}
 */
proto.cloudquery.plugin.v3.GetVersion.Response.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setVersion(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cloudquery.plugin.v3.GetVersion.Response.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cloudquery.plugin.v3.GetVersion.Response.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cloudquery.plugin.v3.GetVersion.Response} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cloudquery.plugin.v3.GetVersion.Response.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVersion();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string version = 1;
 * @return {string}
 */
proto.cloudquery.plugin.v3.GetVersion.Response.prototype.getVersion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.cloudquery.plugin.v3.GetVersion.Response} returns this
 */
proto.cloudquery.plugin.v3.GetVersion.Response.prototype.setVersion = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cloudquery.plugin.v3.Init.prototype.toObject = function(opt_includeInstance) {
  return proto.cloudquery.plugin.v3.Init.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cloudquery.plugin.v3.Init} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cloudquery.plugin.v3.Init.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cloudquery.plugin.v3.Init}
 */
proto.cloudquery.plugin.v3.Init.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cloudquery.plugin.v3.Init;
  return proto.cloudquery.plugin.v3.Init.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cloudquery.plugin.v3.Init} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cloudquery.plugin.v3.Init}
 */
proto.cloudquery.plugin.v3.Init.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cloudquery.plugin.v3.Init.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cloudquery.plugin.v3.Init.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cloudquery.plugin.v3.Init} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cloudquery.plugin.v3.Init.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cloudquery.plugin.v3.Init.Request.prototype.toObject = function(opt_includeInstance) {
  return proto.cloudquery.plugin.v3.Init.Request.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cloudquery.plugin.v3.Init.Request} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cloudquery.plugin.v3.Init.Request.toObject = function(includeInstance, msg) {
  var f, obj = {
    spec: msg.getSpec_asB64(),
    noConnection: jspb.Message.getBooleanFieldWithDefault(msg, 2, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cloudquery.plugin.v3.Init.Request}
 */
proto.cloudquery.plugin.v3.Init.Request.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cloudquery.plugin.v3.Init.Request;
  return proto.cloudquery.plugin.v3.Init.Request.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cloudquery.plugin.v3.Init.Request} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cloudquery.plugin.v3.Init.Request}
 */
proto.cloudquery.plugin.v3.Init.Request.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSpec(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setNoConnection(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cloudquery.plugin.v3.Init.Request.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cloudquery.plugin.v3.Init.Request.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cloudquery.plugin.v3.Init.Request} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cloudquery.plugin.v3.Init.Request.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSpec_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getNoConnection();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * optional bytes spec = 1;
 * @return {!(string|Uint8Array)}
 */
proto.cloudquery.plugin.v3.Init.Request.prototype.getSpec = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes spec = 1;
 * This is a type-conversion wrapper around `getSpec()`
 * @return {string}
 */
proto.cloudquery.plugin.v3.Init.Request.prototype.getSpec_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSpec()));
};


/**
 * optional bytes spec = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSpec()`
 * @return {!Uint8Array}
 */
proto.cloudquery.plugin.v3.Init.Request.prototype.getSpec_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSpec()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.cloudquery.plugin.v3.Init.Request} returns this
 */
proto.cloudquery.plugin.v3.Init.Request.prototype.setSpec = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bool no_connection = 2;
 * @return {boolean}
 */
proto.cloudquery.plugin.v3.Init.Request.prototype.getNoConnection = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.cloudquery.plugin.v3.Init.Request} returns this
 */
proto.cloudquery.plugin.v3.Init.Request.prototype.setNoConnection = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cloudquery.plugin.v3.Init.Response.prototype.toObject = function(opt_includeInstance) {
  return proto.cloudquery.plugin.v3.Init.Response.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cloudquery.plugin.v3.Init.Response} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cloudquery.plugin.v3.Init.Response.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cloudquery.plugin.v3.Init.Response}
 */
proto.cloudquery.plugin.v3.Init.Response.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cloudquery.plugin.v3.Init.Response;
  return proto.cloudquery.plugin.v3.Init.Response.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cloudquery.plugin.v3.Init.Response} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cloudquery.plugin.v3.Init.Response}
 */
proto.cloudquery.plugin.v3.Init.Response.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cloudquery.plugin.v3.Init.Response.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cloudquery.plugin.v3.Init.Response.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cloudquery.plugin.v3.Init.Response} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cloudquery.plugin.v3.Init.Response.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cloudquery.plugin.v3.GetTables.prototype.toObject = function(opt_includeInstance) {
  return proto.cloudquery.plugin.v3.GetTables.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cloudquery.plugin.v3.GetTables} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cloudquery.plugin.v3.GetTables.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cloudquery.plugin.v3.GetTables}
 */
proto.cloudquery.plugin.v3.GetTables.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cloudquery.plugin.v3.GetTables;
  return proto.cloudquery.plugin.v3.GetTables.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cloudquery.plugin.v3.GetTables} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cloudquery.plugin.v3.GetTables}
 */
proto.cloudquery.plugin.v3.GetTables.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cloudquery.plugin.v3.GetTables.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cloudquery.plugin.v3.GetTables.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cloudquery.plugin.v3.GetTables} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cloudquery.plugin.v3.GetTables.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.cloudquery.plugin.v3.GetTables.Request.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cloudquery.plugin.v3.GetTables.Request.prototype.toObject = function(opt_includeInstance) {
  return proto.cloudquery.plugin.v3.GetTables.Request.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cloudquery.plugin.v3.GetTables.Request} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cloudquery.plugin.v3.GetTables.Request.toObject = function(includeInstance, msg) {
  var f, obj = {
    tablesList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f,
    skipTablesList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cloudquery.plugin.v3.GetTables.Request}
 */
proto.cloudquery.plugin.v3.GetTables.Request.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cloudquery.plugin.v3.GetTables.Request;
  return proto.cloudquery.plugin.v3.GetTables.Request.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cloudquery.plugin.v3.GetTables.Request} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cloudquery.plugin.v3.GetTables.Request}
 */
proto.cloudquery.plugin.v3.GetTables.Request.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addTables(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addSkipTables(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cloudquery.plugin.v3.GetTables.Request.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cloudquery.plugin.v3.GetTables.Request.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cloudquery.plugin.v3.GetTables.Request} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cloudquery.plugin.v3.GetTables.Request.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTablesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
  f = message.getSkipTablesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
};


/**
 * repeated string tables = 1;
 * @return {!Array<string>}
 */
proto.cloudquery.plugin.v3.GetTables.Request.prototype.getTablesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.cloudquery.plugin.v3.GetTables.Request} returns this
 */
proto.cloudquery.plugin.v3.GetTables.Request.prototype.setTablesList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.cloudquery.plugin.v3.GetTables.Request} returns this
 */
proto.cloudquery.plugin.v3.GetTables.Request.prototype.addTables = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.cloudquery.plugin.v3.GetTables.Request} returns this
 */
proto.cloudquery.plugin.v3.GetTables.Request.prototype.clearTablesList = function() {
  return this.setTablesList([]);
};


/**
 * repeated string skip_tables = 2;
 * @return {!Array<string>}
 */
proto.cloudquery.plugin.v3.GetTables.Request.prototype.getSkipTablesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.cloudquery.plugin.v3.GetTables.Request} returns this
 */
proto.cloudquery.plugin.v3.GetTables.Request.prototype.setSkipTablesList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.cloudquery.plugin.v3.GetTables.Request} returns this
 */
proto.cloudquery.plugin.v3.GetTables.Request.prototype.addSkipTables = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.cloudquery.plugin.v3.GetTables.Request} returns this
 */
proto.cloudquery.plugin.v3.GetTables.Request.prototype.clearSkipTablesList = function() {
  return this.setSkipTablesList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.cloudquery.plugin.v3.GetTables.Response.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cloudquery.plugin.v3.GetTables.Response.prototype.toObject = function(opt_includeInstance) {
  return proto.cloudquery.plugin.v3.GetTables.Response.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cloudquery.plugin.v3.GetTables.Response} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cloudquery.plugin.v3.GetTables.Response.toObject = function(includeInstance, msg) {
  var f, obj = {
    tablesList: msg.getTablesList_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cloudquery.plugin.v3.GetTables.Response}
 */
proto.cloudquery.plugin.v3.GetTables.Response.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cloudquery.plugin.v3.GetTables.Response;
  return proto.cloudquery.plugin.v3.GetTables.Response.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cloudquery.plugin.v3.GetTables.Response} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cloudquery.plugin.v3.GetTables.Response}
 */
proto.cloudquery.plugin.v3.GetTables.Response.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.addTables(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cloudquery.plugin.v3.GetTables.Response.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cloudquery.plugin.v3.GetTables.Response.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cloudquery.plugin.v3.GetTables.Response} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cloudquery.plugin.v3.GetTables.Response.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTablesList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(
      1,
      f
    );
  }
};


/**
 * repeated bytes tables = 1;
 * @return {!(Array<!Uint8Array>|Array<string>)}
 */
proto.cloudquery.plugin.v3.GetTables.Response.prototype.getTablesList = function() {
  return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * repeated bytes tables = 1;
 * This is a type-conversion wrapper around `getTablesList()`
 * @return {!Array<string>}
 */
proto.cloudquery.plugin.v3.GetTables.Response.prototype.getTablesList_asB64 = function() {
  return /** @type {!Array<string>} */ (jspb.Message.bytesListAsB64(
      this.getTablesList()));
};


/**
 * repeated bytes tables = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTablesList()`
 * @return {!Array<!Uint8Array>}
 */
proto.cloudquery.plugin.v3.GetTables.Response.prototype.getTablesList_asU8 = function() {
  return /** @type {!Array<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
      this.getTablesList()));
};


/**
 * @param {!(Array<!Uint8Array>|Array<string>)} value
 * @return {!proto.cloudquery.plugin.v3.GetTables.Response} returns this
 */
proto.cloudquery.plugin.v3.GetTables.Response.prototype.setTablesList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 * @return {!proto.cloudquery.plugin.v3.GetTables.Response} returns this
 */
proto.cloudquery.plugin.v3.GetTables.Response.prototype.addTables = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.cloudquery.plugin.v3.GetTables.Response} returns this
 */
proto.cloudquery.plugin.v3.GetTables.Response.prototype.clearTablesList = function() {
  return this.setTablesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cloudquery.plugin.v3.Sync.prototype.toObject = function(opt_includeInstance) {
  return proto.cloudquery.plugin.v3.Sync.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cloudquery.plugin.v3.Sync} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cloudquery.plugin.v3.Sync.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cloudquery.plugin.v3.Sync}
 */
proto.cloudquery.plugin.v3.Sync.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cloudquery.plugin.v3.Sync;
  return proto.cloudquery.plugin.v3.Sync.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cloudquery.plugin.v3.Sync} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cloudquery.plugin.v3.Sync}
 */
proto.cloudquery.plugin.v3.Sync.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cloudquery.plugin.v3.Sync.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cloudquery.plugin.v3.Sync.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cloudquery.plugin.v3.Sync} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cloudquery.plugin.v3.Sync.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cloudquery.plugin.v3.Sync.MessageInsert.prototype.toObject = function(opt_includeInstance) {
  return proto.cloudquery.plugin.v3.Sync.MessageInsert.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cloudquery.plugin.v3.Sync.MessageInsert} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cloudquery.plugin.v3.Sync.MessageInsert.toObject = function(includeInstance, msg) {
  var f, obj = {
    record: msg.getRecord_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cloudquery.plugin.v3.Sync.MessageInsert}
 */
proto.cloudquery.plugin.v3.Sync.MessageInsert.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cloudquery.plugin.v3.Sync.MessageInsert;
  return proto.cloudquery.plugin.v3.Sync.MessageInsert.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cloudquery.plugin.v3.Sync.MessageInsert} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cloudquery.plugin.v3.Sync.MessageInsert}
 */
proto.cloudquery.plugin.v3.Sync.MessageInsert.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setRecord(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cloudquery.plugin.v3.Sync.MessageInsert.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cloudquery.plugin.v3.Sync.MessageInsert.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cloudquery.plugin.v3.Sync.MessageInsert} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cloudquery.plugin.v3.Sync.MessageInsert.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRecord_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes record = 1;
 * @return {!(string|Uint8Array)}
 */
proto.cloudquery.plugin.v3.Sync.MessageInsert.prototype.getRecord = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes record = 1;
 * This is a type-conversion wrapper around `getRecord()`
 * @return {string}
 */
proto.cloudquery.plugin.v3.Sync.MessageInsert.prototype.getRecord_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getRecord()));
};


/**
 * optional bytes record = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getRecord()`
 * @return {!Uint8Array}
 */
proto.cloudquery.plugin.v3.Sync.MessageInsert.prototype.getRecord_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getRecord()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.cloudquery.plugin.v3.Sync.MessageInsert} returns this
 */
proto.cloudquery.plugin.v3.Sync.MessageInsert.prototype.setRecord = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cloudquery.plugin.v3.Sync.MessageMigrateTable.prototype.toObject = function(opt_includeInstance) {
  return proto.cloudquery.plugin.v3.Sync.MessageMigrateTable.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cloudquery.plugin.v3.Sync.MessageMigrateTable} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cloudquery.plugin.v3.Sync.MessageMigrateTable.toObject = function(includeInstance, msg) {
  var f, obj = {
    table: msg.getTable_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cloudquery.plugin.v3.Sync.MessageMigrateTable}
 */
proto.cloudquery.plugin.v3.Sync.MessageMigrateTable.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cloudquery.plugin.v3.Sync.MessageMigrateTable;
  return proto.cloudquery.plugin.v3.Sync.MessageMigrateTable.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cloudquery.plugin.v3.Sync.MessageMigrateTable} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cloudquery.plugin.v3.Sync.MessageMigrateTable}
 */
proto.cloudquery.plugin.v3.Sync.MessageMigrateTable.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setTable(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cloudquery.plugin.v3.Sync.MessageMigrateTable.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cloudquery.plugin.v3.Sync.MessageMigrateTable.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cloudquery.plugin.v3.Sync.MessageMigrateTable} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cloudquery.plugin.v3.Sync.MessageMigrateTable.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTable_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes table = 1;
 * @return {!(string|Uint8Array)}
 */
proto.cloudquery.plugin.v3.Sync.MessageMigrateTable.prototype.getTable = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes table = 1;
 * This is a type-conversion wrapper around `getTable()`
 * @return {string}
 */
proto.cloudquery.plugin.v3.Sync.MessageMigrateTable.prototype.getTable_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getTable()));
};


/**
 * optional bytes table = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTable()`
 * @return {!Uint8Array}
 */
proto.cloudquery.plugin.v3.Sync.MessageMigrateTable.prototype.getTable_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getTable()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.cloudquery.plugin.v3.Sync.MessageMigrateTable} returns this
 */
proto.cloudquery.plugin.v3.Sync.MessageMigrateTable.prototype.setTable = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cloudquery.plugin.v3.Sync.BackendOptions.prototype.toObject = function(opt_includeInstance) {
  return proto.cloudquery.plugin.v3.Sync.BackendOptions.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cloudquery.plugin.v3.Sync.BackendOptions} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cloudquery.plugin.v3.Sync.BackendOptions.toObject = function(includeInstance, msg) {
  var f, obj = {
    tableName: jspb.Message.getFieldWithDefault(msg, 1, ""),
    connection: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cloudquery.plugin.v3.Sync.BackendOptions}
 */
proto.cloudquery.plugin.v3.Sync.BackendOptions.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cloudquery.plugin.v3.Sync.BackendOptions;
  return proto.cloudquery.plugin.v3.Sync.BackendOptions.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cloudquery.plugin.v3.Sync.BackendOptions} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cloudquery.plugin.v3.Sync.BackendOptions}
 */
proto.cloudquery.plugin.v3.Sync.BackendOptions.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTableName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setConnection(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cloudquery.plugin.v3.Sync.BackendOptions.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cloudquery.plugin.v3.Sync.BackendOptions.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cloudquery.plugin.v3.Sync.BackendOptions} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cloudquery.plugin.v3.Sync.BackendOptions.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTableName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getConnection();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string table_name = 1;
 * @return {string}
 */
proto.cloudquery.plugin.v3.Sync.BackendOptions.prototype.getTableName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.cloudquery.plugin.v3.Sync.BackendOptions} returns this
 */
proto.cloudquery.plugin.v3.Sync.BackendOptions.prototype.setTableName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string connection = 2;
 * @return {string}
 */
proto.cloudquery.plugin.v3.Sync.BackendOptions.prototype.getConnection = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.cloudquery.plugin.v3.Sync.BackendOptions} returns this
 */
proto.cloudquery.plugin.v3.Sync.BackendOptions.prototype.setConnection = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.cloudquery.plugin.v3.Sync.Request.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cloudquery.plugin.v3.Sync.Request.prototype.toObject = function(opt_includeInstance) {
  return proto.cloudquery.plugin.v3.Sync.Request.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cloudquery.plugin.v3.Sync.Request} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cloudquery.plugin.v3.Sync.Request.toObject = function(includeInstance, msg) {
  var f, obj = {
    tablesList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f,
    skipTablesList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f,
    skipDependentTables: jspb.Message.getBooleanFieldWithDefault(msg, 3, false),
    deterministicCqId: jspb.Message.getBooleanFieldWithDefault(msg, 4, false),
    backend: (f = msg.getBackend()) && proto.cloudquery.plugin.v3.Sync.BackendOptions.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cloudquery.plugin.v3.Sync.Request}
 */
proto.cloudquery.plugin.v3.Sync.Request.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cloudquery.plugin.v3.Sync.Request;
  return proto.cloudquery.plugin.v3.Sync.Request.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cloudquery.plugin.v3.Sync.Request} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cloudquery.plugin.v3.Sync.Request}
 */
proto.cloudquery.plugin.v3.Sync.Request.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addTables(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addSkipTables(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSkipDependentTables(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDeterministicCqId(value);
      break;
    case 5:
      var value = new proto.cloudquery.plugin.v3.Sync.BackendOptions;
      reader.readMessage(value,proto.cloudquery.plugin.v3.Sync.BackendOptions.deserializeBinaryFromReader);
      msg.setBackend(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cloudquery.plugin.v3.Sync.Request.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cloudquery.plugin.v3.Sync.Request.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cloudquery.plugin.v3.Sync.Request} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cloudquery.plugin.v3.Sync.Request.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTablesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
  f = message.getSkipTablesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
  f = message.getSkipDependentTables();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getDeterministicCqId();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getBackend();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.cloudquery.plugin.v3.Sync.BackendOptions.serializeBinaryToWriter
    );
  }
};


/**
 * repeated string tables = 1;
 * @return {!Array<string>}
 */
proto.cloudquery.plugin.v3.Sync.Request.prototype.getTablesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.cloudquery.plugin.v3.Sync.Request} returns this
 */
proto.cloudquery.plugin.v3.Sync.Request.prototype.setTablesList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.cloudquery.plugin.v3.Sync.Request} returns this
 */
proto.cloudquery.plugin.v3.Sync.Request.prototype.addTables = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.cloudquery.plugin.v3.Sync.Request} returns this
 */
proto.cloudquery.plugin.v3.Sync.Request.prototype.clearTablesList = function() {
  return this.setTablesList([]);
};


/**
 * repeated string skip_tables = 2;
 * @return {!Array<string>}
 */
proto.cloudquery.plugin.v3.Sync.Request.prototype.getSkipTablesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.cloudquery.plugin.v3.Sync.Request} returns this
 */
proto.cloudquery.plugin.v3.Sync.Request.prototype.setSkipTablesList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.cloudquery.plugin.v3.Sync.Request} returns this
 */
proto.cloudquery.plugin.v3.Sync.Request.prototype.addSkipTables = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.cloudquery.plugin.v3.Sync.Request} returns this
 */
proto.cloudquery.plugin.v3.Sync.Request.prototype.clearSkipTablesList = function() {
  return this.setSkipTablesList([]);
};


/**
 * optional bool skip_dependent_tables = 3;
 * @return {boolean}
 */
proto.cloudquery.plugin.v3.Sync.Request.prototype.getSkipDependentTables = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.cloudquery.plugin.v3.Sync.Request} returns this
 */
proto.cloudquery.plugin.v3.Sync.Request.prototype.setSkipDependentTables = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * optional bool deterministic_cq_id = 4;
 * @return {boolean}
 */
proto.cloudquery.plugin.v3.Sync.Request.prototype.getDeterministicCqId = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.cloudquery.plugin.v3.Sync.Request} returns this
 */
proto.cloudquery.plugin.v3.Sync.Request.prototype.setDeterministicCqId = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * optional BackendOptions backend = 5;
 * @return {?proto.cloudquery.plugin.v3.Sync.BackendOptions}
 */
proto.cloudquery.plugin.v3.Sync.Request.prototype.getBackend = function() {
  return /** @type{?proto.cloudquery.plugin.v3.Sync.BackendOptions} */ (
    jspb.Message.getWrapperField(this, proto.cloudquery.plugin.v3.Sync.BackendOptions, 5));
};


/**
 * @param {?proto.cloudquery.plugin.v3.Sync.BackendOptions|undefined} value
 * @return {!proto.cloudquery.plugin.v3.Sync.Request} returns this
*/
proto.cloudquery.plugin.v3.Sync.Request.prototype.setBackend = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cloudquery.plugin.v3.Sync.Request} returns this
 */
proto.cloudquery.plugin.v3.Sync.Request.prototype.clearBackend = function() {
  return this.setBackend(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cloudquery.plugin.v3.Sync.Request.prototype.hasBackend = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.cloudquery.plugin.v3.Sync.Response.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.cloudquery.plugin.v3.Sync.Response.MessageCase = {
  MESSAGE_NOT_SET: 0,
  MIGRATE_TABLE: 1,
  INSERT: 2
};

/**
 * @return {proto.cloudquery.plugin.v3.Sync.Response.MessageCase}
 */
proto.cloudquery.plugin.v3.Sync.Response.prototype.getMessageCase = function() {
  return /** @type {proto.cloudquery.plugin.v3.Sync.Response.MessageCase} */(jspb.Message.computeOneofCase(this, proto.cloudquery.plugin.v3.Sync.Response.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cloudquery.plugin.v3.Sync.Response.prototype.toObject = function(opt_includeInstance) {
  return proto.cloudquery.plugin.v3.Sync.Response.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cloudquery.plugin.v3.Sync.Response} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cloudquery.plugin.v3.Sync.Response.toObject = function(includeInstance, msg) {
  var f, obj = {
    migrateTable: (f = msg.getMigrateTable()) && proto.cloudquery.plugin.v3.Sync.MessageMigrateTable.toObject(includeInstance, f),
    insert: (f = msg.getInsert()) && proto.cloudquery.plugin.v3.Sync.MessageInsert.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cloudquery.plugin.v3.Sync.Response}
 */
proto.cloudquery.plugin.v3.Sync.Response.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cloudquery.plugin.v3.Sync.Response;
  return proto.cloudquery.plugin.v3.Sync.Response.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cloudquery.plugin.v3.Sync.Response} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cloudquery.plugin.v3.Sync.Response}
 */
proto.cloudquery.plugin.v3.Sync.Response.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.cloudquery.plugin.v3.Sync.MessageMigrateTable;
      reader.readMessage(value,proto.cloudquery.plugin.v3.Sync.MessageMigrateTable.deserializeBinaryFromReader);
      msg.setMigrateTable(value);
      break;
    case 2:
      var value = new proto.cloudquery.plugin.v3.Sync.MessageInsert;
      reader.readMessage(value,proto.cloudquery.plugin.v3.Sync.MessageInsert.deserializeBinaryFromReader);
      msg.setInsert(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cloudquery.plugin.v3.Sync.Response.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cloudquery.plugin.v3.Sync.Response.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cloudquery.plugin.v3.Sync.Response} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cloudquery.plugin.v3.Sync.Response.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMigrateTable();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.cloudquery.plugin.v3.Sync.MessageMigrateTable.serializeBinaryToWriter
    );
  }
  f = message.getInsert();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.cloudquery.plugin.v3.Sync.MessageInsert.serializeBinaryToWriter
    );
  }
};


/**
 * optional MessageMigrateTable migrate_table = 1;
 * @return {?proto.cloudquery.plugin.v3.Sync.MessageMigrateTable}
 */
proto.cloudquery.plugin.v3.Sync.Response.prototype.getMigrateTable = function() {
  return /** @type{?proto.cloudquery.plugin.v3.Sync.MessageMigrateTable} */ (
    jspb.Message.getWrapperField(this, proto.cloudquery.plugin.v3.Sync.MessageMigrateTable, 1));
};


/**
 * @param {?proto.cloudquery.plugin.v3.Sync.MessageMigrateTable|undefined} value
 * @return {!proto.cloudquery.plugin.v3.Sync.Response} returns this
*/
proto.cloudquery.plugin.v3.Sync.Response.prototype.setMigrateTable = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.cloudquery.plugin.v3.Sync.Response.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cloudquery.plugin.v3.Sync.Response} returns this
 */
proto.cloudquery.plugin.v3.Sync.Response.prototype.clearMigrateTable = function() {
  return this.setMigrateTable(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cloudquery.plugin.v3.Sync.Response.prototype.hasMigrateTable = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional MessageInsert insert = 2;
 * @return {?proto.cloudquery.plugin.v3.Sync.MessageInsert}
 */
proto.cloudquery.plugin.v3.Sync.Response.prototype.getInsert = function() {
  return /** @type{?proto.cloudquery.plugin.v3.Sync.MessageInsert} */ (
    jspb.Message.getWrapperField(this, proto.cloudquery.plugin.v3.Sync.MessageInsert, 2));
};


/**
 * @param {?proto.cloudquery.plugin.v3.Sync.MessageInsert|undefined} value
 * @return {!proto.cloudquery.plugin.v3.Sync.Response} returns this
*/
proto.cloudquery.plugin.v3.Sync.Response.prototype.setInsert = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.cloudquery.plugin.v3.Sync.Response.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cloudquery.plugin.v3.Sync.Response} returns this
 */
proto.cloudquery.plugin.v3.Sync.Response.prototype.clearInsert = function() {
  return this.setInsert(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cloudquery.plugin.v3.Sync.Response.prototype.hasInsert = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cloudquery.plugin.v3.Read.prototype.toObject = function(opt_includeInstance) {
  return proto.cloudquery.plugin.v3.Read.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cloudquery.plugin.v3.Read} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cloudquery.plugin.v3.Read.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cloudquery.plugin.v3.Read}
 */
proto.cloudquery.plugin.v3.Read.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cloudquery.plugin.v3.Read;
  return proto.cloudquery.plugin.v3.Read.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cloudquery.plugin.v3.Read} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cloudquery.plugin.v3.Read}
 */
proto.cloudquery.plugin.v3.Read.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cloudquery.plugin.v3.Read.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cloudquery.plugin.v3.Read.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cloudquery.plugin.v3.Read} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cloudquery.plugin.v3.Read.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cloudquery.plugin.v3.Read.Request.prototype.toObject = function(opt_includeInstance) {
  return proto.cloudquery.plugin.v3.Read.Request.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cloudquery.plugin.v3.Read.Request} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cloudquery.plugin.v3.Read.Request.toObject = function(includeInstance, msg) {
  var f, obj = {
    table: msg.getTable_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cloudquery.plugin.v3.Read.Request}
 */
proto.cloudquery.plugin.v3.Read.Request.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cloudquery.plugin.v3.Read.Request;
  return proto.cloudquery.plugin.v3.Read.Request.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cloudquery.plugin.v3.Read.Request} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cloudquery.plugin.v3.Read.Request}
 */
proto.cloudquery.plugin.v3.Read.Request.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setTable(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cloudquery.plugin.v3.Read.Request.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cloudquery.plugin.v3.Read.Request.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cloudquery.plugin.v3.Read.Request} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cloudquery.plugin.v3.Read.Request.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTable_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes table = 1;
 * @return {!(string|Uint8Array)}
 */
proto.cloudquery.plugin.v3.Read.Request.prototype.getTable = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes table = 1;
 * This is a type-conversion wrapper around `getTable()`
 * @return {string}
 */
proto.cloudquery.plugin.v3.Read.Request.prototype.getTable_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getTable()));
};


/**
 * optional bytes table = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTable()`
 * @return {!Uint8Array}
 */
proto.cloudquery.plugin.v3.Read.Request.prototype.getTable_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getTable()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.cloudquery.plugin.v3.Read.Request} returns this
 */
proto.cloudquery.plugin.v3.Read.Request.prototype.setTable = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cloudquery.plugin.v3.Read.Response.prototype.toObject = function(opt_includeInstance) {
  return proto.cloudquery.plugin.v3.Read.Response.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cloudquery.plugin.v3.Read.Response} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cloudquery.plugin.v3.Read.Response.toObject = function(includeInstance, msg) {
  var f, obj = {
    record: msg.getRecord_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cloudquery.plugin.v3.Read.Response}
 */
proto.cloudquery.plugin.v3.Read.Response.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cloudquery.plugin.v3.Read.Response;
  return proto.cloudquery.plugin.v3.Read.Response.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cloudquery.plugin.v3.Read.Response} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cloudquery.plugin.v3.Read.Response}
 */
proto.cloudquery.plugin.v3.Read.Response.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setRecord(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cloudquery.plugin.v3.Read.Response.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cloudquery.plugin.v3.Read.Response.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cloudquery.plugin.v3.Read.Response} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cloudquery.plugin.v3.Read.Response.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRecord_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes record = 1;
 * @return {!(string|Uint8Array)}
 */
proto.cloudquery.plugin.v3.Read.Response.prototype.getRecord = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes record = 1;
 * This is a type-conversion wrapper around `getRecord()`
 * @return {string}
 */
proto.cloudquery.plugin.v3.Read.Response.prototype.getRecord_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getRecord()));
};


/**
 * optional bytes record = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getRecord()`
 * @return {!Uint8Array}
 */
proto.cloudquery.plugin.v3.Read.Response.prototype.getRecord_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getRecord()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.cloudquery.plugin.v3.Read.Response} returns this
 */
proto.cloudquery.plugin.v3.Read.Response.prototype.setRecord = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cloudquery.plugin.v3.Write.prototype.toObject = function(opt_includeInstance) {
  return proto.cloudquery.plugin.v3.Write.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cloudquery.plugin.v3.Write} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cloudquery.plugin.v3.Write.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cloudquery.plugin.v3.Write}
 */
proto.cloudquery.plugin.v3.Write.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cloudquery.plugin.v3.Write;
  return proto.cloudquery.plugin.v3.Write.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cloudquery.plugin.v3.Write} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cloudquery.plugin.v3.Write}
 */
proto.cloudquery.plugin.v3.Write.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cloudquery.plugin.v3.Write.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cloudquery.plugin.v3.Write.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cloudquery.plugin.v3.Write} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cloudquery.plugin.v3.Write.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cloudquery.plugin.v3.Write.MessageMigrateTable.prototype.toObject = function(opt_includeInstance) {
  return proto.cloudquery.plugin.v3.Write.MessageMigrateTable.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cloudquery.plugin.v3.Write.MessageMigrateTable} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cloudquery.plugin.v3.Write.MessageMigrateTable.toObject = function(includeInstance, msg) {
  var f, obj = {
    table: msg.getTable_asB64(),
    migrateForce: jspb.Message.getBooleanFieldWithDefault(msg, 2, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cloudquery.plugin.v3.Write.MessageMigrateTable}
 */
proto.cloudquery.plugin.v3.Write.MessageMigrateTable.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cloudquery.plugin.v3.Write.MessageMigrateTable;
  return proto.cloudquery.plugin.v3.Write.MessageMigrateTable.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cloudquery.plugin.v3.Write.MessageMigrateTable} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cloudquery.plugin.v3.Write.MessageMigrateTable}
 */
proto.cloudquery.plugin.v3.Write.MessageMigrateTable.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setTable(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setMigrateForce(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cloudquery.plugin.v3.Write.MessageMigrateTable.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cloudquery.plugin.v3.Write.MessageMigrateTable.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cloudquery.plugin.v3.Write.MessageMigrateTable} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cloudquery.plugin.v3.Write.MessageMigrateTable.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTable_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getMigrateForce();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * optional bytes table = 1;
 * @return {!(string|Uint8Array)}
 */
proto.cloudquery.plugin.v3.Write.MessageMigrateTable.prototype.getTable = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes table = 1;
 * This is a type-conversion wrapper around `getTable()`
 * @return {string}
 */
proto.cloudquery.plugin.v3.Write.MessageMigrateTable.prototype.getTable_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getTable()));
};


/**
 * optional bytes table = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTable()`
 * @return {!Uint8Array}
 */
proto.cloudquery.plugin.v3.Write.MessageMigrateTable.prototype.getTable_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getTable()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.cloudquery.plugin.v3.Write.MessageMigrateTable} returns this
 */
proto.cloudquery.plugin.v3.Write.MessageMigrateTable.prototype.setTable = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bool migrate_force = 2;
 * @return {boolean}
 */
proto.cloudquery.plugin.v3.Write.MessageMigrateTable.prototype.getMigrateForce = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.cloudquery.plugin.v3.Write.MessageMigrateTable} returns this
 */
proto.cloudquery.plugin.v3.Write.MessageMigrateTable.prototype.setMigrateForce = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cloudquery.plugin.v3.Write.MessageInsert.prototype.toObject = function(opt_includeInstance) {
  return proto.cloudquery.plugin.v3.Write.MessageInsert.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cloudquery.plugin.v3.Write.MessageInsert} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cloudquery.plugin.v3.Write.MessageInsert.toObject = function(includeInstance, msg) {
  var f, obj = {
    record: msg.getRecord_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cloudquery.plugin.v3.Write.MessageInsert}
 */
proto.cloudquery.plugin.v3.Write.MessageInsert.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cloudquery.plugin.v3.Write.MessageInsert;
  return proto.cloudquery.plugin.v3.Write.MessageInsert.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cloudquery.plugin.v3.Write.MessageInsert} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cloudquery.plugin.v3.Write.MessageInsert}
 */
proto.cloudquery.plugin.v3.Write.MessageInsert.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setRecord(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cloudquery.plugin.v3.Write.MessageInsert.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cloudquery.plugin.v3.Write.MessageInsert.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cloudquery.plugin.v3.Write.MessageInsert} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cloudquery.plugin.v3.Write.MessageInsert.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRecord_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes record = 1;
 * @return {!(string|Uint8Array)}
 */
proto.cloudquery.plugin.v3.Write.MessageInsert.prototype.getRecord = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes record = 1;
 * This is a type-conversion wrapper around `getRecord()`
 * @return {string}
 */
proto.cloudquery.plugin.v3.Write.MessageInsert.prototype.getRecord_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getRecord()));
};


/**
 * optional bytes record = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getRecord()`
 * @return {!Uint8Array}
 */
proto.cloudquery.plugin.v3.Write.MessageInsert.prototype.getRecord_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getRecord()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.cloudquery.plugin.v3.Write.MessageInsert} returns this
 */
proto.cloudquery.plugin.v3.Write.MessageInsert.prototype.setRecord = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cloudquery.plugin.v3.Write.MessageDeleteStale.prototype.toObject = function(opt_includeInstance) {
  return proto.cloudquery.plugin.v3.Write.MessageDeleteStale.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cloudquery.plugin.v3.Write.MessageDeleteStale} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cloudquery.plugin.v3.Write.MessageDeleteStale.toObject = function(includeInstance, msg) {
  var f, obj = {
    table: msg.getTable_asB64(),
    sourceName: jspb.Message.getFieldWithDefault(msg, 2, ""),
    syncTime: (f = msg.getSyncTime()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    tableName: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cloudquery.plugin.v3.Write.MessageDeleteStale}
 */
proto.cloudquery.plugin.v3.Write.MessageDeleteStale.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cloudquery.plugin.v3.Write.MessageDeleteStale;
  return proto.cloudquery.plugin.v3.Write.MessageDeleteStale.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cloudquery.plugin.v3.Write.MessageDeleteStale} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cloudquery.plugin.v3.Write.MessageDeleteStale}
 */
proto.cloudquery.plugin.v3.Write.MessageDeleteStale.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setTable(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSourceName(value);
      break;
    case 3:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setSyncTime(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setTableName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cloudquery.plugin.v3.Write.MessageDeleteStale.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cloudquery.plugin.v3.Write.MessageDeleteStale.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cloudquery.plugin.v3.Write.MessageDeleteStale} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cloudquery.plugin.v3.Write.MessageDeleteStale.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTable_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getSourceName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getSyncTime();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getTableName();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional bytes table = 1;
 * @return {!(string|Uint8Array)}
 */
proto.cloudquery.plugin.v3.Write.MessageDeleteStale.prototype.getTable = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes table = 1;
 * This is a type-conversion wrapper around `getTable()`
 * @return {string}
 */
proto.cloudquery.plugin.v3.Write.MessageDeleteStale.prototype.getTable_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getTable()));
};


/**
 * optional bytes table = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTable()`
 * @return {!Uint8Array}
 */
proto.cloudquery.plugin.v3.Write.MessageDeleteStale.prototype.getTable_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getTable()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.cloudquery.plugin.v3.Write.MessageDeleteStale} returns this
 */
proto.cloudquery.plugin.v3.Write.MessageDeleteStale.prototype.setTable = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional string source_name = 2;
 * @return {string}
 */
proto.cloudquery.plugin.v3.Write.MessageDeleteStale.prototype.getSourceName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.cloudquery.plugin.v3.Write.MessageDeleteStale} returns this
 */
proto.cloudquery.plugin.v3.Write.MessageDeleteStale.prototype.setSourceName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional google.protobuf.Timestamp sync_time = 3;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.cloudquery.plugin.v3.Write.MessageDeleteStale.prototype.getSyncTime = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 3));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.cloudquery.plugin.v3.Write.MessageDeleteStale} returns this
*/
proto.cloudquery.plugin.v3.Write.MessageDeleteStale.prototype.setSyncTime = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cloudquery.plugin.v3.Write.MessageDeleteStale} returns this
 */
proto.cloudquery.plugin.v3.Write.MessageDeleteStale.prototype.clearSyncTime = function() {
  return this.setSyncTime(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cloudquery.plugin.v3.Write.MessageDeleteStale.prototype.hasSyncTime = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string table_name = 4;
 * @return {string}
 */
proto.cloudquery.plugin.v3.Write.MessageDeleteStale.prototype.getTableName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.cloudquery.plugin.v3.Write.MessageDeleteStale} returns this
 */
proto.cloudquery.plugin.v3.Write.MessageDeleteStale.prototype.setTableName = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.cloudquery.plugin.v3.Write.Request.oneofGroups_ = [[1,2,3]];

/**
 * @enum {number}
 */
proto.cloudquery.plugin.v3.Write.Request.MessageCase = {
  MESSAGE_NOT_SET: 0,
  MIGRATE_TABLE: 1,
  INSERT: 2,
  DELETE: 3
};

/**
 * @return {proto.cloudquery.plugin.v3.Write.Request.MessageCase}
 */
proto.cloudquery.plugin.v3.Write.Request.prototype.getMessageCase = function() {
  return /** @type {proto.cloudquery.plugin.v3.Write.Request.MessageCase} */(jspb.Message.computeOneofCase(this, proto.cloudquery.plugin.v3.Write.Request.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cloudquery.plugin.v3.Write.Request.prototype.toObject = function(opt_includeInstance) {
  return proto.cloudquery.plugin.v3.Write.Request.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cloudquery.plugin.v3.Write.Request} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cloudquery.plugin.v3.Write.Request.toObject = function(includeInstance, msg) {
  var f, obj = {
    migrateTable: (f = msg.getMigrateTable()) && proto.cloudquery.plugin.v3.Write.MessageMigrateTable.toObject(includeInstance, f),
    insert: (f = msg.getInsert()) && proto.cloudquery.plugin.v3.Write.MessageInsert.toObject(includeInstance, f),
    pb_delete: (f = msg.getDelete()) && proto.cloudquery.plugin.v3.Write.MessageDeleteStale.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cloudquery.plugin.v3.Write.Request}
 */
proto.cloudquery.plugin.v3.Write.Request.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cloudquery.plugin.v3.Write.Request;
  return proto.cloudquery.plugin.v3.Write.Request.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cloudquery.plugin.v3.Write.Request} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cloudquery.plugin.v3.Write.Request}
 */
proto.cloudquery.plugin.v3.Write.Request.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.cloudquery.plugin.v3.Write.MessageMigrateTable;
      reader.readMessage(value,proto.cloudquery.plugin.v3.Write.MessageMigrateTable.deserializeBinaryFromReader);
      msg.setMigrateTable(value);
      break;
    case 2:
      var value = new proto.cloudquery.plugin.v3.Write.MessageInsert;
      reader.readMessage(value,proto.cloudquery.plugin.v3.Write.MessageInsert.deserializeBinaryFromReader);
      msg.setInsert(value);
      break;
    case 3:
      var value = new proto.cloudquery.plugin.v3.Write.MessageDeleteStale;
      reader.readMessage(value,proto.cloudquery.plugin.v3.Write.MessageDeleteStale.deserializeBinaryFromReader);
      msg.setDelete(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cloudquery.plugin.v3.Write.Request.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cloudquery.plugin.v3.Write.Request.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cloudquery.plugin.v3.Write.Request} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cloudquery.plugin.v3.Write.Request.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMigrateTable();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.cloudquery.plugin.v3.Write.MessageMigrateTable.serializeBinaryToWriter
    );
  }
  f = message.getInsert();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.cloudquery.plugin.v3.Write.MessageInsert.serializeBinaryToWriter
    );
  }
  f = message.getDelete();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.cloudquery.plugin.v3.Write.MessageDeleteStale.serializeBinaryToWriter
    );
  }
};


/**
 * optional MessageMigrateTable migrate_table = 1;
 * @return {?proto.cloudquery.plugin.v3.Write.MessageMigrateTable}
 */
proto.cloudquery.plugin.v3.Write.Request.prototype.getMigrateTable = function() {
  return /** @type{?proto.cloudquery.plugin.v3.Write.MessageMigrateTable} */ (
    jspb.Message.getWrapperField(this, proto.cloudquery.plugin.v3.Write.MessageMigrateTable, 1));
};


/**
 * @param {?proto.cloudquery.plugin.v3.Write.MessageMigrateTable|undefined} value
 * @return {!proto.cloudquery.plugin.v3.Write.Request} returns this
*/
proto.cloudquery.plugin.v3.Write.Request.prototype.setMigrateTable = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.cloudquery.plugin.v3.Write.Request.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cloudquery.plugin.v3.Write.Request} returns this
 */
proto.cloudquery.plugin.v3.Write.Request.prototype.clearMigrateTable = function() {
  return this.setMigrateTable(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cloudquery.plugin.v3.Write.Request.prototype.hasMigrateTable = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional MessageInsert insert = 2;
 * @return {?proto.cloudquery.plugin.v3.Write.MessageInsert}
 */
proto.cloudquery.plugin.v3.Write.Request.prototype.getInsert = function() {
  return /** @type{?proto.cloudquery.plugin.v3.Write.MessageInsert} */ (
    jspb.Message.getWrapperField(this, proto.cloudquery.plugin.v3.Write.MessageInsert, 2));
};


/**
 * @param {?proto.cloudquery.plugin.v3.Write.MessageInsert|undefined} value
 * @return {!proto.cloudquery.plugin.v3.Write.Request} returns this
*/
proto.cloudquery.plugin.v3.Write.Request.prototype.setInsert = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.cloudquery.plugin.v3.Write.Request.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cloudquery.plugin.v3.Write.Request} returns this
 */
proto.cloudquery.plugin.v3.Write.Request.prototype.clearInsert = function() {
  return this.setInsert(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cloudquery.plugin.v3.Write.Request.prototype.hasInsert = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional MessageDeleteStale delete = 3;
 * @return {?proto.cloudquery.plugin.v3.Write.MessageDeleteStale}
 */
proto.cloudquery.plugin.v3.Write.Request.prototype.getDelete = function() {
  return /** @type{?proto.cloudquery.plugin.v3.Write.MessageDeleteStale} */ (
    jspb.Message.getWrapperField(this, proto.cloudquery.plugin.v3.Write.MessageDeleteStale, 3));
};


/**
 * @param {?proto.cloudquery.plugin.v3.Write.MessageDeleteStale|undefined} value
 * @return {!proto.cloudquery.plugin.v3.Write.Request} returns this
*/
proto.cloudquery.plugin.v3.Write.Request.prototype.setDelete = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.cloudquery.plugin.v3.Write.Request.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cloudquery.plugin.v3.Write.Request} returns this
 */
proto.cloudquery.plugin.v3.Write.Request.prototype.clearDelete = function() {
  return this.setDelete(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cloudquery.plugin.v3.Write.Request.prototype.hasDelete = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cloudquery.plugin.v3.Write.Response.prototype.toObject = function(opt_includeInstance) {
  return proto.cloudquery.plugin.v3.Write.Response.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cloudquery.plugin.v3.Write.Response} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cloudquery.plugin.v3.Write.Response.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cloudquery.plugin.v3.Write.Response}
 */
proto.cloudquery.plugin.v3.Write.Response.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cloudquery.plugin.v3.Write.Response;
  return proto.cloudquery.plugin.v3.Write.Response.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cloudquery.plugin.v3.Write.Response} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cloudquery.plugin.v3.Write.Response}
 */
proto.cloudquery.plugin.v3.Write.Response.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cloudquery.plugin.v3.Write.Response.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cloudquery.plugin.v3.Write.Response.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cloudquery.plugin.v3.Write.Response} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cloudquery.plugin.v3.Write.Response.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cloudquery.plugin.v3.Close.prototype.toObject = function(opt_includeInstance) {
  return proto.cloudquery.plugin.v3.Close.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cloudquery.plugin.v3.Close} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cloudquery.plugin.v3.Close.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cloudquery.plugin.v3.Close}
 */
proto.cloudquery.plugin.v3.Close.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cloudquery.plugin.v3.Close;
  return proto.cloudquery.plugin.v3.Close.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cloudquery.plugin.v3.Close} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cloudquery.plugin.v3.Close}
 */
proto.cloudquery.plugin.v3.Close.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cloudquery.plugin.v3.Close.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cloudquery.plugin.v3.Close.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cloudquery.plugin.v3.Close} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cloudquery.plugin.v3.Close.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cloudquery.plugin.v3.Close.Request.prototype.toObject = function(opt_includeInstance) {
  return proto.cloudquery.plugin.v3.Close.Request.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cloudquery.plugin.v3.Close.Request} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cloudquery.plugin.v3.Close.Request.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cloudquery.plugin.v3.Close.Request}
 */
proto.cloudquery.plugin.v3.Close.Request.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cloudquery.plugin.v3.Close.Request;
  return proto.cloudquery.plugin.v3.Close.Request.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cloudquery.plugin.v3.Close.Request} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cloudquery.plugin.v3.Close.Request}
 */
proto.cloudquery.plugin.v3.Close.Request.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cloudquery.plugin.v3.Close.Request.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cloudquery.plugin.v3.Close.Request.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cloudquery.plugin.v3.Close.Request} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cloudquery.plugin.v3.Close.Request.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cloudquery.plugin.v3.Close.Response.prototype.toObject = function(opt_includeInstance) {
  return proto.cloudquery.plugin.v3.Close.Response.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cloudquery.plugin.v3.Close.Response} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cloudquery.plugin.v3.Close.Response.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cloudquery.plugin.v3.Close.Response}
 */
proto.cloudquery.plugin.v3.Close.Response.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cloudquery.plugin.v3.Close.Response;
  return proto.cloudquery.plugin.v3.Close.Response.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cloudquery.plugin.v3.Close.Response} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cloudquery.plugin.v3.Close.Response}
 */
proto.cloudquery.plugin.v3.Close.Response.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cloudquery.plugin.v3.Close.Response.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cloudquery.plugin.v3.Close.Response.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cloudquery.plugin.v3.Close.Response} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cloudquery.plugin.v3.Close.Response.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};


goog.object.extend(exports, proto.cloudquery.plugin.v3);
